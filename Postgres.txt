Stack Builder
This wizard will help you install additional software to complement your PostgreSQL or EnterpriseDB Postgres Plus installation

PostgreSQL is one of the most important relational database systems in the open source world. It is released under a BSD style license. I've seen a few documents talking about the development of .NET application with PostgreSQL as the back-end server. That's why I'm writing this article to illustrate how you can access to the PostgreSQL database system using C#.

Key Features of PostgreSQL

PostgreSQL runs on all major operating systems, including Linux, UNIX and Windows. It supports text, images, sounds, and video, and includes programming interfaces for Java, Python, Ruby, C# and Open Database Connectivity (ODBC).

PostgreSQL supports a part of the SQL standard and features including the following -

    Complex SQL queries
    SQL Sub-selects
    Foreign keys
    Trigger
    Views
    Transactions
    Multiversion concurrency control (MVCC)
    Streaming Replication (as of 9.0)
    Hot Standby (as of 9.0)

PostgreSQL can be extended by the user in many ways. For example by adding new -

    Data types
    Functions
    Operators
    Aggregate functions
    Index methods

Procedural Languages Support

PostgreSQL supports four standard procedural languages, which allows the users to write their own code in any of the languages and it can be executed by PostgreSQL database server. These procedural languages are - PL/pgSQL, PL/Tcl, PL/Perl and PL/Python. Besides, other non-standard procedural languages like PL/PHP, PL/V8, PL/Ruby, PL/Java, etc., are also supported.

List the database
\l 

Connect to the vcmdatabase.
\c vcm;

Create table
CREATE TABLE USERS(
   UID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
   USERID         VARCHAR(15)  NOT NULL,
   FIRSTNAME      VARCHAR(50)  NOT NULL,
   LASTNAME       VARCHAR(50)  NOT NULL,
   EMAIL          VARCHAR(50)  NOT NULL,
   DEPARTMENT     VARCHAR(50),
   ROLE           INT,
   CREATEDDATE    TIMESTAMP,
   MODIFIEDDATE   TIMESTAMP,
   ISAPPROVED     CHAR(1),
   ISDELETED      CHAR(1),
   APPROVEDBY     VARCHAR(15)
);

List table(s)
\d;


CREATE TABLE CUSTOMER(
   CID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
   CUSTOMERID     VARCHAR(15) NOT NULL,
   FIRSTNAME      VARCHAR(50)  NOT NULL,
   LASTNAME       VARCHAR(50)  NOT NULL,
   EMAIL          VARCHAR(50)  NOT NULL,
   CREATEDDATE    TIMESTAMP NOT NULL DEFAULT CURRENT_DATE,
   MODIFIEDDATE   TIMESTAMP NOT NULL DEFAULT CURRENT_DATE
);



List Users table columns
\d users
not null default CURRENT_DATE
Create Schema - is a named collection of tables. A schema can also contain views, indexes, sequences, data types, operators, and functions. 
CREATE TABLE SCHEMA VZSCHEMA.USERS(
   UID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
   USERID         VARCHAR(15)  NOT NULL,
   FIRSTNAME      VARCHAR(50)  NOT NULL,
   LASTNAME       VARCHAR(50)  NOT NULL,
   EMAIL          VARCHAR(50)  NOT NULL,
   DEPARTMENT     VARCHAR(50),
   ROLE           INT,
   CREATEDDATE    TIMESTAMP,
   MODIFIEDDATE   TIMESTAMP,
   ISAPPROVED     CHAR(1),
   ISDELETED      CHAR(1),
   APPROVEDBY     VARCHAR(15)
);


Insert value in table
INSERT INTO USERS(USERID,FIRSTNAME,LASTNAME,EMAIL,DEPARTMENT,ROLE,CREATEDDATE,MODIFIEDDATE,ISAPPROVED,ISDELETED,APPROVEDBY)
VALUES ('Vij', 'Vijay', 'Ram', 'vijayram@postgrestest.com', 'IOT', 2, '2018-01-19', '2018-01-19', 'Y', 'N', 'Raj');

INSERT INTO USERS(USERID,FIRSTNAME,LASTNAME,EMAIL,DEPARTMENT,ROLE,CREATEDDATE,MODIFIEDDATE,ISAPPROVED,ISDELETED,APPROVEDBY)
VALUES ('Sam', 'Samuel', 'Raj', 'samraj@postgrestest.com', 'IOT', 2, '2018-01-19', '2018-01-19', 'Y', 'N', 'Raj');

INSERT INTO USERS(USERID,FIRSTNAME,LASTNAME,EMAIL,DEPARTMENT,ROLE,CREATEDDATE,MODIFIEDDATE,ISAPPROVED,ISDELETED,APPROVEDBY)
VALUES ('Vina', 'Vinayak', 'Siva', 'vinsiva@postgrestest.com', 'BC', 2, '2018-01-19', '2018-01-19', 'Y', 'N', 'Sam');

STATUS_CODE ROWS_AFFECTED.

Limits the row in the table according to the number of rows you want to fetch
SELECT * FROM COMPANY USERS 2;


Pick up a set of records from a particular offset
SELECT * FROM USERS LIMIT 3 OFFSET 2;



With, These statements often referred to as Common Table Expressions or CTEs, can be thought of as defining temporary tables that exist just for one query
Recursive,  reference to itself
With VZ AS
(Select
 USERID
, FIRSTNAME
, LASTNAME
, EMAIL
, ROLE
FROM USERS)
Select * From VZ;


CREATE OR REPLACE FUNCTION INSERTUSERS(USERID VARCHAR(15), FIRSTNAME VARCHAR(50), LASTNAME VARCHAR(50), EMAIL VARCHAR(50),
DEPARTMENT VARCHAR(50), ROLE INT, CREATEDDATE TIMESTAMP, MODIFIEDDATE TIMESTAMP, ISAPPROVED CHAR(1), ISDELETED CHAR(1), APPROVEDBY VARCHAR(15)) 
    RETURNS void AS $$
    BEGIN
      INSERT INTO USERS(USERID,FIRSTNAME,LASTNAME,EMAIL,DEPARTMENT,ROLE,CREATEDDATE,MODIFIEDDATE,ISAPPROVED,ISDELETED,APPROVEDBY)
      VALUES (USERID, FIRSTNAME, LASTNAME, EMAIL, DEPARTMENT, ROLE, CREATEDDATE, MODIFIEDDATE, ISAPPROVED, ISDELETED, APPROVEDBY);
    END;
    $$ LANGUAGE plpgsql;

SELECT INSERTUSERS('Sasi', 'Sai', 'Sasi', 'sasisai@postgrestest.com', 'FIN', 2, '2018-03-01', '2018-03-01', 'Y', 'N', 'Vina');


CREATE OR REPLACE FUNCTION GETUSERS() 
    RETURNS setof users AS $$
      SELECT * FROM USERS;
    $$ LANGUAGE sql;

create function GetEmployees() returns setof text as 'select * from employee;' language 'sql';

CREATE OR REPLACE FUNCTION totalUsers ()
RETURNS integer AS $total$
declare
	total integer;
BEGIN
   SELECT count(*) into total FROM USERS;
   RETURN total;
END;
$total$ LANGUAGE plpgsql;




RECURSIVE keyword along with the WITH clause, 
WITH RECURSIVE t(n) AS (
   VALUES (0)
   UNION ALL
   SELECT SALARY FROM COMPANY WHERE SALARY < 20000
)
SELECT sum(n) FROM t;


returning their contents by means of its RETURNING clause; and then the primary query reads that output
CREATE TABLE USERS1(
   ID INT PRIMARY KEY          NOT NULL,
   NAME           VARCHAR(50)  NOT NULL,
   ROLE           INT     NOT NULL,
   DEPARTMENT     VARCHAR(50)
);

WITH moved_rows AS (
   DELETE FROM USERS
   WHERE
      ROLE >= 3
   RETURNING *
)
INSERT INTO USERS1 (SELECT * FROM moved_rows);


Having pick out particular rows where the function's result meets some condition
SELECT firstname FROM USERS GROUP BY firstname HAVING count(firstname) < 2;


 query catalog tables and make use of the pg_get_functiondef() function here's the sample query:

SELECT n.nspname AS schema
      ,proname AS fname
      ,proargnames AS args
      ,t.typname AS return_type
      ,d.description
      ,pg_get_functiondef(p.oid) as definition
  FROM pg_proc p
  JOIN pg_type t
    ON p.prorettype = t.oid
  LEFT OUTER
  JOIN pg_description d
    ON p.oid = d.objoid
  LEFT OUTER
  JOIN pg_namespace n
    ON n.oid = p.pronamespace
 WHERE n.nspname~'<$SCHEMA_NAME_PATTERN>'
   AND proname~'<$FUNCTION_NAME_PATTERN>'


    Select distinct rows by using DISTINCT operator.
    Filter rows by using WHERE clause.
    Sort rows by usingORDER BY clause.
    Select rows based on various operators such as BETWEEN, INand LIKE.
    Group rows into groups using GROUP BY clause
    Apply conditions for groups using HAVING clause.
    Join a table to other tables using INNER JOIN, LEFT JOIN, FULL OUTER JOIN, CROSS JOIN clauses.


SQL functions
For simple scalar queries. Not much to plan, better save any overhead.
For single calls per session. Nothing to gain from plan caching and prepared statements that PL/pgSQL has to offer. See below.
If they are typically called in the context of bigger queries and are simple enough to be inlined.

For lack of experience with any procedural language like PL/pgSQL. Many know SQL well and that's about all you need for SQL functions. Few can say the same about PL/pgSQL.

    A bit shorter code. No block overhead.

PL/pgSQL functions

are the better choice:

    When you need any procedural elements or variables that are not available in SQL functions, obviously.

    For any kind of dynamic SQL, where you build and EXECUTE statements dynamically. Special care is needed to avoid SQL injection.

https://www.postgresql.org/docs/9.2/static/xfunc-sql.html

 public User GetUserFromDb(int userId){
            using (IDbConnection connection = new NpgsqlConnection (DbConnectionString)) {
                connection.Open ();

                return connection.Query<User> (“proc_GetUserForId“, new{
                    UserId = userId
                }, commandType: CommandType.StoredProcedure).Single();
            }
        }
Unfortunately this will cause dapper to throw an exception as it can’t map the fields returned on the refcursor to the fields on my User class. So instead I have to do this:

        public dynamic GetUserFromDb(int userId){
            using (IDbConnection connection = new NpgsqlConnection (DbConnectionString)) {
                connection.Open ();

                return connection.QueryStoredProcPgSql<User> (“proc_GetUserForId“, new{
                    UserId = userId
                }).Single();

            }
        }
Where QueryStoredProcPgSql is defined as:

    public static class DatabaseHelpers
    {
        public static IEnumerable<T> QueryStoredProcPgSql<T>(this IDbConnection connection, string procName, dynamic parameters){
            IDbTransaction transaction = connection.BeginTransaction ();

            var resultsReference = (IDictionary<string, object>)connection.Query<dynamic> (“\”“ + procName + “\”“, 
                (object)parameters, commandType: CommandType.StoredProcedure, transaction: transaction).Single();
            string resultSetName = (string)resultsReference [procName];
            string resultSetReferenceCommand = string.Format(@”FETCH ALL IN “”{0}“”“, resultSetName);

            var result = connection.Query<T> (resultSetReferenceCommand, 
                null, commandType: CommandType.Text, transaction: transaction); 

            transaction.Commit ();

            return result;
        }
    }


<?xml version="1.0"?>
<configuration>
    <appSettings/>
  <connectionStrings>
    <add name="DSN" 
        connectionString="Server=127.0.0.1;Port=5432;User Id=pagila_app;Password=pg@123;Database=pagila;"/>
  </connectionStrings>
    <system.web>
        <compilation debug="true" />
    </system.web>
</configuration>



public String GetResults(String aquery, int maxrecs, int offset){
        String result = "";
        NpgsqlCommand command; 
        using (NpgsqlConnection conn = new NpgsqlConnection(
                System.Configuration.ConfigurationManager.ConnectionStrings["DSN"].ConnectionString))
        {
            conn.Open();

            command = new NpgsqlCommand("SELECT fnget_film_search_results(:search_criteria, :maxrecs, :offset)", conn);
            command.Parameters.Add(new NpgsqlParameter("search_criteria", System.Data.DbType.String, 300)).Value = aquery;
            command.Parameters.Add(new NpgsqlParameter("maxrecs", System.Data.DbType.Int16)).Value = maxrecs;
            command.Parameters.Add(new NpgsqlParameter("offset", System.Data.DbType.Int16)).Value = offset;

            try
            {
                result = (String)command.ExecuteScalar();
            }
            catch(Exception ex)
            {
                return "<error>ERROR " + ex.ToString() + "</error>";
            }
        }
        return result;
    }

static void Main(string[] args)
     {
         // Connect to a PostgreSQL database
         NpgsqlConnection conn = new NpgsqlConnection("Server=127.0.0.1;User Id=postgres; " + 
             "Password=pwd;Database=postgres;");
         conn.Open();
 
         // Start a transaction as it is required to work with result sets (cursors) in PostgreSQL
         NpgsqlTransaction tran = conn.BeginTransaction();
 
         // Define a command to call show_cities() procedure
         NpgsqlCommand command = new NpgsqlCommand("show_cities", conn);
         command.CommandType = CommandType.StoredProcedure;
 
         // Execute the procedure and obtain a result set
         NpgsqlDataReader dr = command.ExecuteReader();
 
         // Output rows 
         while (dr.Read())
            Console.Write("{0} \t {1} \n", dr[0], dr[1]);
 
         tran.Commit();  
         conn.Close();   
       }





I take the following steps
1. Declare a stored procedure named "sp_article_delete" as a PostgreSql function as follows:
 
DELETE from "Article"
WHERE "ArticleId"=$1;
 
2. I try the following C# code to execute the function:
public void DeleteRow()

{

try

{

int result;

result = 0;

NpgsqlCommand command = new NpgsqlCommand("sp_article_delete(@ArticleId)");

command.CommandType = CommandType.StoredProcedure;

command.Connection = npgsqlConnection;

command.Parameters.Add(new NpgsqlParameter("@ArticleId",DbType.String));

command.Parameters["@ArticleId"].Value = "1";

npgsqlConnection.Open();

result = command.ExecuteNonQuery();

Console.WriteLine("Result of delete: " + result.ToString());

}

catch (Exception ex)

{

throw new Exception(ex.Message);

}

finally

{

if (npgsqlConnection.State == ConnectionState.Open)

{

npgsqlConnection.Close();

}

}

}

 

3. Everything works fine but I can't get the number of records affected from the stored procedure.

4. If I do the following code this problem doesn't happen:

public void DeleteRow()

{

try

{

int result;

result = 0;

NpgsqlCommand command = new NpgsqlCommand("DELETE FROM \"Article\" WHERE articleid='1'");

command.CommandType = CommandType.StoredProcedure;

command.Connection = npgsqlConnection;

command.Parameters.Add(new NpgsqlParameter("@ArticleId",DbType.String));

command.Parameters["@ArticleId"].Value = "1";

npgsqlConnection.Open();

result = command.ExecuteNonQuery();

//return result;

Console.WriteLine("Result of delete: " + result.ToString());

}

catch (Exception ex)

{

throw new Exception(ex.Message);

}

finally

{

if (npgsqlConnection.State == ConnectionState.Open)

{

npgsqlConnection.Close();

}

}

}



using Dapper;
using System.Data;
using Npgsql;
using ASPCoreSample.Models;
 
namespace ASPCoreSample.Repository
{
    public class CustomerRepository : IRepository<Customer>
    {
        private string connectionString;
        public CustomerRepository(IConfiguration configuration)
        {
            connectionString = configuration.GetValue<string>("DBInfo:ConnectionString");
        }
 
        internal IDbConnection Connection
        {
            get
            {
                return new NpgsqlConnection(connectionString);
            }
        }
 
        public void Add(Customer item)
        {
            using (IDbConnection dbConnection = Connection)
            {
                dbConnection.Open();
                dbConnection.Execute("INSERT INTO customer (name,phone,email,address) VALUES(@Name,@Phone,@Email,@Address)", item);
            }
 
        }
 
        public IEnumerable<Customer> FindAll()
        {
            using (IDbConnection dbConnection = Connection)
            {
                dbConnection.Open();
                return dbConnection.Query<Customer>("SELECT * FROM customer");
            }
        }
 
        public Customer FindByID(int id)
        {
            using (IDbConnection dbConnection = Connection)
            {
                dbConnection.Open();
                return dbConnection.Query<Customer>("SELECT * FROM customer WHERE id = @Id", new { Id = id }).FirstOrDefault();
            }
        }
 
        public void Remove(int id)
        {
            using (IDbConnection dbConnection = Connection)
            {
                dbConnection.Open();
                dbConnection.Execute("DELETE FROM customer WHERE Id=@Id", new { Id = id });
            }
        }
 
        public void Update(Customer item)
        {
            using (IDbConnection dbConnection = Connection)
            {
                dbConnection.Open();
                dbConnection.Query("UPDATE customer SET name = @Name,  phone  = @Phone, email= @Email, address= @Address WHERE id = @Id", item);
            }
        }
    }


public class CustomerController : Controller
    {
        private readonly CustomerRepository customerRepository;
 
        public CustomerController(IConfiguration configuration)
        {
            customerRepository = new CustomerRepository(configuration);
        }
 
 
        public IActionResult Index()
        {
            return View(customerRepository.FindAll());
        }
 
        public IActionResult Create()
        {
            return View();
        }
 
        // POST: Customer/Create
        [HttpPost]
        public IActionResult Create(Customer cust)
        {
            if (ModelState.IsValid)
            {
                customerRepository.Add(cust);
                return RedirectToAction("Index");
            }
            return View(cust);
 
        }
 
        // GET: /Customer/Edit/1
        public IActionResult Edit(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }
            Customer obj = customerRepository.FindByID(id.Value);
            if (obj == null)
            {
                return NotFound();
            }
            return View(obj);
 
        }
 
        // POST: /Customer/Edit   
        [HttpPost]
        public IActionResult Edit(Customer obj)
        {
 
            if (ModelState.IsValid)
            {
                customerRepository.Update(obj);
                return RedirectToAction("Index");
            }
            return View(obj);
        }
 
        // GET:/Customer/Delete/1
        public IActionResult Delete(int? id)
        {
 
            if (id == null)
            {
                return NotFound();
            }
            customerRepository.Remove(id.Value);
            return RedirectToAction("Index");
        }
    }
}

Repository object is created in constructor.
7. Views:

Add Customer folder in Views folder and add Index, Create and Edit views.

Index.cshtml:
?
@model IEnumerable<ASPCoreSample.Models.Customer>
 
@{
    ViewData["Title"] = "Index";
}
 
<h2>Index</h2>
 
<p>
    <a asp-action="Create">Create New</a>
</p>
<table class="table">
    <tr>
        <th>
            @Html.DisplayNameFor(model => model.Name)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Email)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Phone)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Address)
        </th>       
        <th></th>
    </tr>
 
    @foreach (var item in Model)
    {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Name)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Email)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Phone)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Address)
            </td>
            <td>
                <a asp-action="Edit" asp-route-id="@item.Id">Edit</a> |              
                <a asp-action="Delete" asp-route-id="@item.Id" onclick="return confirm('Are sure wants to delete?');">Delete</a>
            </td>
        </tr>
    }
</table>

It will show Grid of Customer data.

crud

Create.cshtml:
?
@model ASPCoreSample.Models.Customer
 
@{
    ViewData["Title"] = "Create";
}
 
<h2>Create</h2>
 
<form asp-action="Create">
    <div class="form-horizontal">
        <h4>Customer Information:</h4>
        <hr />
        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
        <div class="form-group">
            <label asp-for="Name" class="col-md-2 control-label"></label>
            <div class="col-md-10">
                <input asp-for="Name" class="form-control" />
                <span asp-validation-for="Name" class="text-danger" />
            </div>
        </div>
        <div class="form-group">
            <label asp-for="Email" class="col-md-2 control-label"></label>
            <div class="col-md-10">
                <input asp-for="Email" class="form-control" />
                <span asp-validation-for="Email" class="text-danger" />
            </div>
        </div>
        <div class="form-group">
            <label asp-for="Phone" class="col-md-2 control-label"></label>
            <div class="col-md-10">
                <input asp-for="Phone" class="form-control" />
                <span asp-validation-for="Phone" class="text-danger" />
            </div>
        </div>
        <div class="form-group">
            <label asp-for="Address" class="col-md-2 control-label"></label>
            <div class="col-md-10">
                <input asp-for="Address" class="form-control" />
                <span asp-validation-for="Address" class="text-danger" />
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
</form>
 
<div>
    <a asp-action="Index">Back to List</a>
</div>
 
@section Scripts {
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/jquery-validation/dist/jquery.validate.min.js"></script>
    <script src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js"></script>
}

crud

Edit.cshtml:
?
@model ASPCoreSample.Models.Customer
 
@{
    ViewData["Title"] = "Create";
}
 
<h2>Edit</h2>
 
<form asp-action="Edit">
    <div class="form-horizontal">
        <h4>Customer Information:</h4>
        <hr />
        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
        <div class="form-group">
            <label asp-for="Name" class="col-md-2 control-label"></label>
            <div class="col-md-10">
                <input asp-for="Name" class="form-control" />
                <span asp-validation-for="Name" class="text-danger" />
            </div>
        </div>
        <div class="form-group">
            <label asp-for="Email" class="col-md-2 control-label"></label>
            <div class="col-md-10">
                <input asp-for="Email" class="form-control" />
                <span asp-validation-for="Email" class="text-danger" />
            </div>
        </div>
        <div class="form-group">
            <label asp-for="Phone" class="col-md-2 control-label"></label>
            <div class="col-md-10">
                <input asp-for="Phone" class="form-control" />
                <span asp-validation-for="Phone" class="text-danger" />
            </div>
        </div>
        <div class="form-group">
            <label asp-for="Address" class="col-md-2 control-label"></label>
            <div class="col-md-10">
                <input asp-for="Address" class="form-control" />
                <span asp-validation-for="Address" class="text-danger" />
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
</form>
 
<div>
    <a asp-action="Index">Back to List</a>
</div>
 
@section Scripts {
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/jquery-validation/dist/jquery.validate.min.js"></script>
    <script src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js"></script>
}



http://www.talkingdotnet.com/how-to-create-an-angular-4-app-with-visual-studio-2017/
http://www.c-sharpcorner.com/article/setting-up-angular-project-with-asp-net-core-and-visual-studio-2017/
https://stackoverflow.com/questions/46307272/angular-4-drop-down-menu-using-bootstrap


Here is the application component's HTML

<app-header ></app-header>
<div class="container-fluid">
    <div class="row" >
        <div class="col-md-12">
            <router-outlet></router-outlet>
        </div>
    </div>
</div>

Here is the app-header html code.

<nav class="navbar navbar-default">
    <div class="container-fluid">
        <div class="navbar-header">
            <a routerLink="/" class="navbar-brand">NEMO</a>
        </div>

        <div class="collapse navbar-collapse navbar-ex1-collapse" >

            <ul class="nav navbar-nav">
                <li routerLinkActive="active"><a routerLink="/file-restore" *ngIf="! newHireService.isNewHireMode">File Restore</a></li>

                <li class="menu-item dropdown"  >
                    <a style="cursor: pointer;" class="dropdown-toggle" data-toggle="dropdown" >Reports<span class="caret" ></span></a>
                    <ul class="dropdown-menu">
                        <li class="menu-item dropdown dropdown-submenu">
                            <a href="#" class="dropdown-toggle" data-toggle="dropdown">Level 1</a>
                            <ul class="dropdown-menu">
                                <li class="menu-item ">
                                    <a href="#">Link 1</a>
                                </li>
                                <li class="menu-item dropdown dropdown-submenu">
                                    <a href="#" class="dropdown-toggle" data-toggle="dropdown">Level 2</a>
                                    <ul class="dropdown-menu">
                                        <li>
                                            <a href="#">Link 3</a>
                                        </li>
                                    </ul>
                                </li>
                            </ul>
                        </li>
                    </ul>
                </li>
            </ul>

        </div>
    </div>
</nav>

my .angular-cli.json files has the following:

{
  "$schema": "./node_modules/@angular/cli/lib/config/schema.json",
  "project": {
    "name": "nemo-ui"
  },
  "apps": [
    {
      "root": "src",
      "outDir": "dist",
      "assets": [
        "assets",
        "favicon.ico"
      ],
      "index": "index.html",
      "main": "main.ts",
      "polyfills": "polyfills.ts",
      "test": "test.ts",
      "tsconfig": "tsconfig.app.json",
      "testTsconfig": "tsconfig.spec.json",
      "prefix": "app",
      "styles": [
        "../node_modules/bootstrap/dist/css/bootstrap.min.css",
        "../node_modules/font-awesome/css/font-awesome.css",
            "../node_modules/jquery/dist/jquery.min.js",
        "styles.css"
       ],
      "scripts": [],
      "environmentSource": "environments/environment.ts",
      "environments": {
        "dev": "environments/environment.ts",
        "prod": "environments/environment.prod.ts"
      }
    }
  ],
  "e2e": {
    "protractor": {
      "config": "./protractor.conf.js"
    }
  },
  "lint": [
    {
      "project": "src/tsconfig.app.json"
    },
    {
      "project": "src/tsconfig.spec.json"
    },
    {
      "project": "e2e/tsconfig.e2e.json"
    }
  ],
  "test": {
    "karma": {
      "config": "./karma.conf.js"
    }
  },
  "defaults": {
    "styleExt": "css",
    "component": {}
  }
}


This is how that part of your angular-cli sholuld look like:

   "styles": [
      "../node_modules/bootstrap/dist/css/bootstrap.min.css",
      "styles.css"
    ],
    "scripts": [
      "../node_modules/jquery/dist/jquery.min.js",
      "../node_modules/bootstrap/dist/js/bootstrap.js"
    ],


https://ng-bootstrap.github.io/#/components/dropdown/examples

https://mdbootstrap.com/angular/components/navbars/

https://www.w3schools.com/bootstrap4/bootstrap_navbar.asp

