Security Group
-----------------------------

from __future__ import print_function
from botocore.exceptions import ClientError
import json
import boto3

def lambda_handler(event, context):
    # TODO implement
    ec2 = boto3.client('ec2')
    try:
        response = ec2.describe_security_groups()
        print(response)
        print("Ingress Portocol  " + response['SecurityGroups'][1]['IpPermissions'][0]['IpProtocol'])
        print("Ingress From Port without TCP 80 " + str(response['SecurityGroups'][1]['IpPermissions'][0]['FromPort']))
        print("Ingress To Port without TCP 80 " + str(response['SecurityGroups'][1]['IpPermissions'][0]['ToPort']))
        #if response['SecurityGroups'][0]['IpPermissions'][0]['IpProtocol']:
         #   print ("Encrypted")
        #else:
         #   print ("Un-encrypted")
    except ClientError as e:
        print(e)

----------------------------------------------

######## S3

from __future__ import print_function

import json
import urllib
import boto3

def lambda_handler(event, context):
    first = event.get('first', 50)
    second = event.get('second', 0)
    sum = first + second
    print('Loading function1')
    s3 = boto3.resource('s3')
    bucket = s3.Bucket('clouders')
    print (bucket)
    for obj in bucket.objects.all():
        key = s3.Object(bucket.name, obj.key)
        print (key.sse_customer_algorithm)
        print (key.content_type)
        print (key.server_side_encryption)
        obj.get()["Body"].read()
        print (obj.key)
        print (obj.size)
        print (obj.last_modified)
    s3 = boto3.client('s3')
    result = s3.get_bucket_acl(Bucket='clouders')
    print(result)
    print("OWNER : " + result['Owner']['ID'])
    print("GROUP : " + result['Grants'][1]['Grantee']['Type'])
    print("PERMISSION : " + result['Grants'][1]['Permission'])
    if result['Grants'][1]['Permission'] == 'FULL_CONTROL':
       print ("Group - Global Access")
    else:
        print ("")

------------------------------------------------------------------------------
RDS
-----

from __future__ import print_function

import boto3

def lambda_handler(event, context):
    client = boto3.client('rds')
    response = client.describe_db_instances()
    print(response)
    print("Database" + response['DBInstances'][0]['Engine'])
    if response['DBInstances'][0]['StorageEncrypted']:
        print ("Encrypted")
    else:
        print ("Un-encrypted")

------------------------------------------------------------------------------
EBS Volume
----------

from __future__ import print_function
#from email.mime.multipart import MIMEMultipart
#from email.mime.text import MIMEText

import boto3
import json
#import smtplib

def lambda_handler(event, context):
    ec2 = boto3.client('ec2')
    response = ec2.describe_volumes()
    print(response['Volumes'][0]['AvailabilityZone'])
    print(response['Volumes'][0]['Encrypted'])
    if response['Volumes'][0]['Encrypted']:
        print ("Encrypted")
    else:
        print ("Un-ecrypted")

    # AWS Config
    #EMAIL_HOST = 'email-smtp.us-east-1.amazonaws.com'
    #EMAIL_HOST_USER = 'Clouders'
    #EMAIL_HOST_PASSWORD = 'Clouders@1'
    #EMAIL_PORT = 587

    #msg = MIMEMultipart('alternative')
    #msg['Subject'] = "EBS Volume Unencryption"
    #msg['From'] = "subasis@gmail.com"
    #msg['To'] = "msrialwar@gmail.com"

    #mime_text = MIMEText("EBS Volume", 'text')
    #msg.attach(mime_text)

    #s = smtplib.SMTP(EMAIL_HOST, EMAIL_PORT)
    #s.starttls()
    #s.login(EMAIL_HOST_USER, EMAIL_HOST_PASSWORD)
    #s.sendmail(me, you, msg.as_string())
    #s.quit()




